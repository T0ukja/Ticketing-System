@page "/tickets"
@using Microsoft.Exchange.WebServices.Data;
@using System.Collections.ObjectModel;
@using BlazorApp1.Data
@using System.Threading;
 @using System.Timers;

@inject Emails Emailing
@inject IJSRuntime JSRuntime
<PageTitle>TkSystem</PageTitle>

<h1>Uudet tiketit</h1>

<h1>@unreadedmails.Count()</h1>
@foreach(EmailMessage message in unreadedmails)
{
    <ul>
        <li>
            @message.Subject

        </li>
    <button class="btn btn-primary" @onclick="() => Checkdata(message.Id.ToString())">Katso tiedot</button>
        @if(emailchain != null)
        {
 
            @foreach (Item item in emailchain[0].Items)
                    {
                        <ul>
                            @item.Subject
                            @item.TextBody.Text
                            </ul>
                        Console.WriteLine("   Item ID: " + item.Id.UniqueId);
                        Console.WriteLine("   Subject: " + item.Subject);
                        Console.WriteLine("   Sender: " + item.IsFromMe);
                        Console.WriteLine("   Received: " + item.DateTimeReceived);
                        Console.WriteLine("   Body: " + item.TextBody.Text);
                       
                    }
            
        }
    </ul>
}



@code {
    private static System.Timers.Timer aTimer;

    private void Checkdata(string id)
    {
        emailchain = Emailing.getconversion(id);
    }

    private List<ConversationNode> emailchain;
    // private Collection<Item> emailchain; 

   private List<EmailMessage> unreadedmails;
    PeriodicTimer periodicTimer = new (TimeSpan.FromSeconds(15));
    
    protected override async void OnInitialized()
    {

        unreadedmails = Emailing.Getemails();
        RunTimer();  


        //  unreadedmails = Emailing.Getemails();
    }
    async void RunTimer()
    {
        while (await periodicTimer.WaitForNextTickAsync()) {
            List<EmailMessage> unreadedcheck = Emailing.Getemails();

            if(unreadedcheck.Count() != unreadedmails.Count()){

                unreadedmails = Emailing.Getemails();
                StateHasChanged();

            }
            
        }    
    }
    //<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
//<button class="btn btn-primary" @onclick="Moro">Click mee</button>


public void Dispose()
{
   periodicTimer?.Dispose();
}
 
    
}}


