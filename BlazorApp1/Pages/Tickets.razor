@page "/tickets"
@using System.Collections.ObjectModel;

@using BlazorApp1.Data
@using System.Timers;
@using BlazorApp1.Models;
@inject Emails Emailing
@inject IJSRuntime JSRuntime
<PageTitle>TkSystem</PageTitle>
<style>

</style>
<link href="/css/StyleSheet.css" rel="stylesheet" />

<h1>Uudet tiketit</h1>

<h1>@mongoDbList.Count()</h1>
@foreach (Datamodel message in mongoDbList)
{
	<ul>
		<li>
			@message.subject
		</li>




		<button class="btn btn-primary" @onclick="() => CheckData(message.message_id.ToString())">Katso tiedot</button>
		@if (emailChain != null && message.message_id.ToString().Equals(emailId) && ShowPopUp)
		{
			<div class="modal" tabindex="-1" style="display:block" role="dialog">
				<div class="modal-dialog">
					<div class="modal-content">
						<div class="modal-header">
							<h1>
								@message.subject
							</h1>
							<button type="button" class="close" @onclick="()=> ClosePopup()"> Close</button>
						</div>
						<div class="modal-body" id="listitems">
                            @foreach (Microsoft.Exchange.WebServices.Data.Item item in emailChain[0].Items)
                            {
								<ul b-3xxtam6d07>

									@item.TextBody.Text
								</ul>


							}
						</div>
					</div>
				</div>
			</div>


		}
	</ul>




    @code {
    // Timer variable declaration.
    private static System.Timers.Timer aTimer;
    // This is variable is used to get id of conversation which is later compared to dialog email id.
    private string emailId;
    // List which is used to get objects from MongoDB database collection.
    private List<Datamodel> mongoDbList;
    // Used to loop email conversation messages.
    private List<Microsoft.Exchange.WebServices.Data.ConversationNode> emailChain;
    // Timer which is assigned 15 seconds (Updates every 5 seconds).
    PeriodicTimer periodicTimer = new(TimeSpan.FromSeconds(10));
    // bool variable for dialog state.
    bool ShowPopUp = false;


    // This function is called when pressing more information about ticket.
    private async Task CheckData(string id)
    {
        // Getting conversation of email to list.
        emailChain = await Emailing.GetConversion(id);
        // Assigning id, which is compared later in dialog.
        emailId = id;
        // This opens dialog when true.
        ShowPopUp = true;

    }




    protected override async Task OnInitializedAsync()
	{
		
    // Assing messages to list (Checks if there is new unreaded messages available and send them to database).
    mongoDbList = await Emailing.GetMessagesDbAsync();// Starts 5 second timer
	RunTimer();
	}

    void ClosePopup()
    {
		// Changes value to false to shutdown dialog module
		ShowPopUp = false;
		// Changes website state without reload.
		StateHasChanged();

	}
	async void RunTimer()
	{
		// Timer function.
		while (await periodicTimer.WaitForNextTickAsync())
		{
			// Get new emails and updates list.
			Emailing.GetEmails();
			mongoDbList = await Emailing.GetMessagesDbAsync();

			StateHasChanged();



		}
	}


	// Dispose function, maybe needed later.
	public void Dispose()
	{
		periodicTimer?.Dispose();
	}


}
}


