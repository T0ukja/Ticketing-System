@page "/tickets"
@using System.Collections.ObjectModel;
@using BlazorApp1.Authentication
@using BlazorApp1.Data
@using System.Timers;
@using Microsoft.Exchange.WebServices.Data;
@using BlazorApp1.Models;
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims
@using MongoDB.Bson
@inject Emails Emailing
@inject NavigationManager navManager;
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Administrator, HelpDesk")]
@inject AuthenticationStateProvider authStateProvider;
@inject AuthenticationStateProvider context;

<style>

	body{
		background-color: #92c5ef;
	}
</style>

<PageTitle>TkSystem</PageTitle>



<style>

</style>
<link href="/css/StyleSheet.css" rel="stylesheet" />
<h1>New Tickets (@mongoDbList.Count())</h1>

   		
<Showmailsrazor mongoDbList="mongoDbList"/>
<br />
<br />

<h1>Tickets that are in progress (@mongoDBListInProgress.Count())</h1>

<Showmailsrazor mongoDbList="mongoDBListInProgress"/>
<br />
<br />






@code {
	private List<Datamodel> mongoDbList;

	private List<Datamodel> mongoDBListInProgress;

	private AuthenticationState authstate;
	[CascadingParameter] private Task<AuthenticationState> provider { get; set; } = default!;
	private ClaimsPrincipal? user;
	PeriodicTimer periodicTimer = new(TimeSpan.FromSeconds(15));





	protected override async System.Threading.Tasks.Task OnInitializedAsync()
	{
		mongoDbList = await Emailing.GetMessagesDbAsync();
		mongoDBListInProgress = await Emailing.GetTicketsInProgress();
		//	Emailing.GetEmails();


		var state = await provider;
		// This is the current logged in user
		user = state.User;

		// Assing messages to list (Checks if there is new unreaded messages available and send them to database).

		RunTimer();
		// Starts 5 second timer													
	}

	async void RunTimer()
	{
		// Timer function.
		while (await periodicTimer.WaitForNextTickAsync())
		{
			// Do check to verify that there is new email
			// Get new emails and updates list.
			Emailing.GetEmails();
			mongoDbList = await Emailing.GetMessagesDbAsync();
			mongoDBListInProgress = await Emailing.GetTicketsInProgress();
			StateHasChanged();



		}
	}


	public void Dispose()
	{
		periodicTimer?.Dispose();
	}

}
}


