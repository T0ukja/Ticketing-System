@page "/tickets"
@using System.Collections.ObjectModel;
@using BlazorApp1.Data
@using System.Timers;
@using Microsoft.Exchange.WebServices.Data;

@using BlazorApp1.Models;
@inject Emails Emailing
@inject NavigationManager navManager;
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Administrator, HelpDesk")]





<PageTitle>TkSystem</PageTitle>



<style>

</style>
<link href="/css/StyleSheet.css" rel="stylesheet" />

<h1>Uudet tiketit</h1>

<h1>@mongoDbList.Count()</h1>
	   		
<table>
	 <tr>
    <th>Subject</th>
    <th>From</th>
    <th>Time</th>
  </tr>
  

@foreach (Datamodel message in mongoDbList)
{
		<tr>
		<th>
			@message.subject
		</th>
			<th>
			@message.sender
		</th>
				<th>
			@message.datetimereceived
		</th>
	

		<button class="btn btn-primary" @onclick="() => CheckData(message.message_id.ToString())">Katso tiedot</button>

		</tr>


		@if (emailChain != null && message.message_id.ToString().Equals(emailId) && ShowPopUp)
		{
			<div class="modal" tabindex="-1" dialogbox role="dialog">
				<div class="modal-dialog modal-lg">
					<div class="modal-content">
						<div class="modal-header" style="align-self:center;" >
						

							

							<h1>
								@message.subject
							</h1>
						
							
						</div>
						<div class="modal-body" id="listitems">
							
									
                            @foreach(ConversationNode node in emailChain.ConversationNodes){
							
								@foreach(Item item in node.Items)
								{
							
							var index =@item.TextBody.Text.ToString().IndexOf("_");
									<div id="divTest" style="border:1px solid black;">
										<tr>
											@if (index > 1)
											{
											@item.TextBody.Text.Remove(index).ToString();

											}
											else
											{
										@item.TextBody.Text.ToString();

												

											}
								

									</tr>

									<button type="button" class="close" @onclick="() => SendMail()">Answer</button>
									<button type="button" class="close" @onclick="() => ResponseMail()">Response</button>


						</div>


							
								}
							}
						
						</div>
											<button type="button" class="close" @onclick="()=> ClosePopup()"> Close</button>

					</div>
				</div>
			</div>
		

		}
		}
</table>
@code {

	[CascadingParameter]
	private Task<AuthenticationState> authstat { get; set; 
	}



	// Timer variable declaration.
	private static System.Timers.Timer aTimer;
	// This is variable is used to get id of conversation which is later compared to dialog email id.
	private string emailId;
	// List which is used to get objects from MongoDB database collection.
	private List<Datamodel> mongoDbList;
	// Used to loop email conversation messages.
	// Timer which is assigned 15 seconds (Updates every 5 seconds).
	PeriodicTimer periodicTimer = new(TimeSpan.FromSeconds(10));
	// bool variable for dialog state.
	bool ShowPopUp = false;

	ConversationResponse emailChain;

	// This function is called when pressing more information about ticket.
	private async System.Threading.Tasks.Task CheckData(string id)
	{
		// Getting conversation of email to list.
		emailChain = await Emailing.GetConversion(id);
		// Assigning id, which is compared later in dialog.
		emailId = id;
		// This opens dialog when true.
		ShowPopUp = true;

	}




	protected override async System.Threading.Tasks.Task OnInitializedAsync()
	{


		// Assing messages to list (Checks if there is new unreaded messages available and send them to database).
		mongoDbList = await Emailing.GetMessagesDbAsync();// Starts 5 second timer
		RunTimer();
	}

	void ResponseMail()
	{

	}
	void SendMail()
	{
		
	}
	void ClosePopup()
    {
		// Changes value to false to shutdown dialog module
		ShowPopUp = false;
		// Changes website state without reload.
		StateHasChanged();

	}
	async void RunTimer()
	{
		// Timer function.
		while (await periodicTimer.WaitForNextTickAsync())
		{
			// Do check to verify that there is new email
			// Get new emails and updates list.
			Emailing.GetEmails();
			mongoDbList = await Emailing.GetMessagesDbAsync();

			StateHasChanged();



		}
	}


	// Dispose function, maybe needed later.
	public void Dispose()
	{
		periodicTimer?.Dispose();
	}


}
}


