@page "/tickets"
@using Microsoft.Exchange.WebServices.Data;
@using System.Collections.ObjectModel;
@using BlazorApp1.Data
@using System.Threading;
 @using System.Timers;
@using BlazorApp1.Models;
@inject Emails Emailing
@inject IJSRuntime JSRuntime
<PageTitle>TkSystem</PageTitle>
<style>

</style>
<link href="/css/StyleSheet.css" rel="stylesheet" />

<h1>Uudet tiketit</h1>

<h1>@mongodblist.Count()</h1>
@foreach (Datamodel message in mongodblist)
{
	<ul>
		<li>
			@message.subject
		</li>




		<button class="btn btn-primary" @onclick="() => Checkdata(message.message_id.ToString())">Katso tiedot</button>
		@if (emailchain != null && message.message_id.ToString().Equals(emailid) && ShowPopUp)
		{
			<div class="modal" tabindex="-1" style="display:block" role="dialog">
				<div class="modal-dialog">
					<div class="modal-content">
						<div class="modal-header">
							<h1>
								@message.subject
							</h1>
							<button type="button" class="close" @onclick="()=> ClosePopup()"> Close</button>
						</div>
						<div class="modal-body" id="listitems">
							@foreach (Item item in emailchain[0].Items)
							{
								<ul b-3xxtam6d07>

									@item.TextBody.Text
								</ul>


							}
						</div>
					</div>
				</div>
			</div>


		}
	</ul>




	@code {
	// Timer variable declaration.
	private static System.Timers.Timer aTimer;
	// This is variable is used to get id of conversation which is later compared to dialog email id.
	private string emailid;
	// List which is used to get objects from MongoDB database collection.
	private List<Datamodel> mongodblist;
	// Used to loop email conversation messages.
	private List<ConversationNode> emailchain;
	// Timer which is assigned 15 seconds (Updates every 5 seconds).
	PeriodicTimer periodicTimer = new(TimeSpan.FromSeconds(5));
	// bool variable for dialog state.
	bool ShowPopUp = false;


	// This function is called when pressing more information about ticket.
	private void Checkdata(string id)
	{
		// Getting conversation of email to list.
		emailchain = Emailing.getconversion(id);
		// Assigning id, which is compared later in dialog.
		emailid = id;
		// This opens dialog when true.
		ShowPopUp = true;

	}




	protected override async void OnInitialized()
	{
		// Assing messages to list (Checks if there is new unreaded messages available and send them to database).
		mongodblist = Emailing.GetmessagesdbAsync();
		// Starts 5 second timer.
		RunTimer();

	}
	void ClosePopup()
	{
		// Changes value to false to shutdown dialog module
		ShowPopUp = false;
		// Changes website state without reload.
		StateHasChanged();

	}
	async void RunTimer()
	{
		// Timer function.
		while (await periodicTimer.WaitForNextTickAsync())
		{
			// Get new emails and updates list.
			Emailing.Getemails();
			mongodblist = Emailing.GetmessagesdbAsync();

			StateHasChanged();



		}
	}


	// Dispose function, maybe needed later.
	public void Dispose()
	{
		periodicTimer?.Dispose();
	}


}
}


