@page "/change"
@using System.Collections.ObjectModel;
@using BlazorApp1.Authentication
@using BlazorApp1.Data
@using System.Timers;

@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.Exchange.WebServices.Data;
@using BlazorApp1.Models;
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims;

@inject AuthenticationStateProvider authStateProvider;
@inject IJSRuntime JSRuntime

@inject Login login;
@attribute [Authorize(Roles = "Administrator, HelpDesk")]

<style>

	body {
		background-color: #92c5ef;
	}
</style>



<div class="modal-content" style="width:350px; align-content:center; align-items:center;">
			

			<p>
				Old password
			</p>
			<p>

				<input @bind="oldPassword" />
			</p>
			<p>
				New Password
			</p>
			<p>
				<input @bind="newPassword" />
			</p>

	<button type="button" class="btn btn-primary" @onclick="()=> Change(oldPassword, newPassword)">
				Register
			</button>
	
</div>



@code {
	private string oldPassword { get; set; }
	private string newPassword { get; set; }
	//  List<Datamodel> historyLog;
	private AuthenticationState authstate;

	[CascadingParameter] private Task<AuthenticationState> provider { get; set; } = default!;
	private ClaimsPrincipal? user;
	protected override async System.Threading.Tasks.Task OnInitializedAsync()
	{
		//	historyLog = await emailing.getHistory();

		var state = await provider;
		// This is the current logged in user
		user = state.User;
	}


	private async void Change(string oldp, string newp)
	{
		bool checkValue = login.ChangePassword(oldp, newp, user.Identity.Name);
		if (checkValue)
		{
			await JSRuntime.InvokeVoidAsync("alert", "Password is changed!");

		}
		else
		{
			await JSRuntime.InvokeVoidAsync("alert", "Wrong credentials!");

		}
	}
}
