@using System.Collections.ObjectModel;
@using BlazorApp1.Authentication
@using BlazorApp1.Data
@using System.Timers;
@using Microsoft.Exchange.WebServices.Data;
@using BlazorApp1.Models;
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims;

@inject Emails Emailing
@inject AuthenticationStateProvider authStateProvider;
@inject AuthenticationStateProvider context;

@page "/inprogress"


<style>

	body{
		background-color: #92c5ef;
	}
</style>
<h3>InProgress</h3>


   		<div style="height: 300px;
    overflow: hidden; overflow-y: scroll; width:55vw; ">
<table tickettable>
	 <tr ticketobject>
    <th>Subject</th>
    <th>From</th>
    <th>Time</th>
	    <th>Handler</th>
			    <th></th>
  </tr>
  

@foreach (Datamodel message in historyListTickets)
{
		<tr subjects>
		<th>
			@message.subject
		</th>
			<th>
			@message.sender
		</th>
				<th>
			@message.datetimereceived
		</th>
		
				<th>
			@message.handler
		</th>
		<th style="    padding-left: 10px;">
			<button class="btn btn-primary" @onclick="() => CheckData(message.message_id.ToString())">Check Info</button>
		</th>


		</tr>


			@if (emailChain != null && message.message_id.ToString().Equals(emailId) && ShowPopUp)
			{
				dialogOpen = true;
				<div class="modal" tabindex="-1" dialogbox role="dialog" style="margin-top:50px;">
					<div class="modal-dialog modal-lg">
						<div class="modal-content">

							<button type="button" class="btn btn-outline-primary rounded-circle" style="width: 55px; height: 55px; margin-left:10px; margin-top:10px;;" @onclick="()=> ClosePopup()"> <i class="fa fa-times fa-2x" aria-hidden="true" style="align-content:center;display: flex; justify-content: center;"></i></button>

							<Popupmodal message="message" emailChain="emailChain" />

						</div>
					</div>
				</div>


			}
		}
</table>
</div>

@code {

	private bool dialogOpen = false;

[CascadingParameter] private Task<AuthenticationState> provider { get; set; } = default!;
private ClaimsPrincipal? user;
private List<Datamodel> historyListTickets;
	private string emailId;
		bool ShowPopUp = false;

	ConversationResponse emailChain;
private async System.Threading.Tasks.Task CheckData(string id)
	{
		// Getting conversation of email to list.
		emailChain = await Emailing.GetConversion(id);
		// Assigning id, which is compared later in dialog.
		emailId = id;
		// This opens dialog when true.
		ShowPopUp = true;

	}


	//user.Identity.Name.ToString(),
	protected override async System.Threading.Tasks.Task OnInitializedAsync(){
			var state = await provider;
            // This is the current logged in user
            user = state.User;
			historyListTickets = await Emailing.GetMessagesDBInProgressUserAsync(user.Identity.Name.ToString());


	}

	
	void ResponseMail()
	{

	}
	void SendMail()
	{
		
	}
	void ClosePopup()
    {
		// Changes value to false to shutdown dialog module
		ShowPopUp = false;
		// Changes website state without reload.
		StateHasChanged();

	}
}
