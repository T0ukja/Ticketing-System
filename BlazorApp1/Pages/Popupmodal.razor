@using System.Collections.ObjectModel;
@using BlazorApp1.Authentication
@using BlazorApp1.Data
@using System.Timers;
@using Microsoft.Exchange.WebServices.Data;
@using BlazorApp1.Models;
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims
@using MongoDB.Bson
@inject Emails Emailing
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Administrator, HelpDesk")]


<div class="modal-header" style="align-self:center; margin-top:-20px;">
	<div container1>


		<div>
			<h1 style="font-size:25px;">
				<div style="align-self:flex-start; ">
					<span style="font-weight:bold;">Subject: </span>  <span>@message.subject</span>

					<br />
					<span style="font-weight:bold;">Handler: </span>  <span>@message.handler</span>


				</div>

				<br />
			</h1>
		</div>


		<div>
			<h1 style="font-size:25px; align-content:center; text-align:center;">
				<div style="align-self:flex-start; ">
					<span style="font-weight:bold; ">Solution: </span>

					<br />




				</div>

				<span style="font-size:25px;">@message.solution</span>
				<br />
			</h1>
		</div>


	</div>
</div>
<div class="modal-body" id="listitems" style="overflow:auto; height:700px;">


	@foreach (ConversationNode node in emailChain.ConversationNodes)
	{

		@foreach (EmailMessage item in node.Items)
		{


			var index = @item.TextBody.Text.IndexOf("_");
			<br />
			<div id="divTest" style="border:1px solid black; border-radius: 5px; ">

				<div style="display:flex;border-bottom: 3px solid;
">

					<div style="margin-left:50px; justify-content:center;">
						From : @item.From.Address
						<br />
						@if (@item.ToRecipients.Count != 0)
						{




							<p style="display:flex;">
								To :
								@foreach (EmailAddress emailmessaage in item.ToRecipients)
								{
								<p>	@emailmessaage.Address, </p>
								}
							</p>
						}

						<br />
						@if (@item.CcRecipients.Count != 0)
						{




							<p style="display:flex;">
								CC :
								@foreach (EmailAddress emailmessaage in item.CcRecipients)
								{
								<p>	@emailmessaage.Address, </p>
								}
							</p>
						}

					</div>


					@if (isPressed == false)
					{
						<div style="margin-left:auto;margin-right:25px;">




							<a href="javascript::void(0)" @onclick="()=>ReplyButton(item.Id, item, item.IsFromMe)">

								<i aa class="fa fa-reply fa-2x" aria-hidden="true"></i>
							</a>

							<a href="javascript::void(0)" @onclick="()=>ReplyButtonAll(item.Id, item, item.IsFromMe)">
								<i aa class="fa fa-reply-all fa-2x" aria-hidden="true"></i>
							</a>
							<a href="javascript::void(0)" @onclick="()=>ReplyButtonForward(item.Id, item, item.IsFromMe)">

								<i aa class="fa fa-share fa-2x" aria-hidden="true"></i>
							</a>
						</div>

					}
				</div>

				@if (index > 1)
				{

					<div style="text-align:left; margin-left:15px;">
						@item.TextBody.Text.Remove(index)
						<br />
						<a href="javascript::void(0)" @onclick="()=>ShowHistory(item.Id)">Show history</a>

						@if (item.Id.Equals(itemidhistory))
						{
							@item.TextBody.Text
						}
					</div>

				}
				else
				{



					<div style="text-align:left; margin-left:15px;">

						@item.TextBody.Text
					</div>



				}





				@if (item.Id == messageid)
				{


							<div style="border:3px solid black; margin-top:10px; margin-bottom;10px; margin-left:10px; margin-right:10px; background-color:lightblue;">
								<div style="display:flex;">
									<p>
										Add receivers
										<input @bind="InputFrom" style="width: 380px; height: 20px;" />
									</p>
									<button type="button" class="btn btn-outline-primary rounded-circle" style="width:40px; height:40px; margin-left:10px;" @onclick="() => AddReceiver(InputFrom,receiverList)">
										<i class="fa fa-plus" aria-hidden="true" style="align-content:center;display: flex; justify-content: center;"></i>
									</button>


								</div>
								<div style="display:flex;">
									<p>
										Add CC
										<input @bind="cc" style="width: 380px; height: 20px;" />
									</p>
									<button type="button" class="btn btn-outline-primary rounded-circle" style="width:40px; height:40px; margin-left:10px;" @onclick="() => AddReceiver(cc, CCList)">
										<i class="fa fa-plus" aria-hidden="true" style="align-content:center;display: flex; justify-content: center;"></i>
									</button>
								</div>

								@if (receiverList != null)
								{
									<p>To</p>
									@foreach (string receiver in receiverList)
									{

										<div style="display:flex; width: 300px;  margin-left:50px;">

											<p style="font-size: 18px; font-family:'Times New Roman', Times, serif;margin-left:10px;">@receiver</p> <button type="button" class="btn btn-lg" style="background-color:transparent; width:40px;height:40px; margin-left:auto" @onclick="()=>DeleteReceiver(receiver, receiverList)">
												<i class="fa fa-window-close fa-2x" aria-hidden="true" style="align-content:center;justify-content: center; display:flex;"></i>
											</button>
										</div>
									}


								}
								@if (CCList != null)
								{
									<p>CC</p>
									@foreach (string ccreceiver in CCList)
									{

										<div style="display:flex; width: 300px;  margin-left:50px;">

									<p style="font-size: 18px; font-family:'Times New Roman', Times, serif;margin-left:10px;">@ccreceiver</p> <button type="button" class="btn btn-lg" style="background-color:transparent; width:40px;height:40px; margin-left:auto" @onclick="()=>DeleteReceiver(ccreceiver, CCList)">
												<i class="fa fa-window-close fa-2x" aria-hidden="true" style="align-content:center;justify-content: center; display:flex;"></i>
											</button>
										</div>
									}
								}
							
									<p>
	<textarea @bind="textbox" cols="40" rows="5" style="height:150px; width:90%;"></textarea>
								</p>
						<button type="button" class="btn btn-outline-primary rounded-circle" style="Width:50px; Height:50px;" @onclick="() => SendMail(type,item.Id.ToString(),receiverList,CCList)">
									<i class="fa fa-paper-plane fa-2x" aria-hidden="true" style="align-content:center;display: flex; justify-content: center;"></i>
								</button>
								<button type="button" class="btn btn-outline-primary rounded-circle" style="width:50px; height:50px;" @onclick="()=>{isPressed = false; messageid = null; StateHasChanged();}">
									<i class="fa fa-times fa-2x" aria-hidden="true"></i>
								</button>



							</div>
						
					
				}

			</div>
		}
	}

</div>


@code {

	// Parameters.
	[Parameter]
	public Datamodel message { get; set; }

	[Parameter]
	public ConversationResponse emailChain { get; set; }

	// bool variable for pressing buttons
	public bool isPressed { get; set; }

	// Variable for showing right history.
	private ItemId itemidhistory { get; set; }


	// Variables for email answering
	private string email_address { get; set; }
	private string InputFrom { get; set; }
	private string cc { get; set; }
	private string textbox { get; set; }
	private bool dialogOpen = false;
	private List<string> receiverList;
	private List<string> CCList;

	// For getting user role.
	[CascadingParameter] private Task<AuthenticationState> provider { get; set; } = default!;
	private ClaimsPrincipal? user;

	// messageid variable used for showing the answer ui in right place. (in list)
	private ItemId messageid;
	// This decides to show or not show history.
	private int buttonStatus { get; set; }
	// Timer variable declaration.
	private static System.Timers.Timer aTimer;
	// This is variable is used to get id of conversation which is later compared to dialog email id.
	private string emailId;
	// List which is used to get objects from MongoDB database collection.
	private List<Datamodel> mongoDbList;
	//private List<Datamodel> mongoDBListJobsInProgress;
	private string type;
	private List<Datamodel> mongoDbListinProgress;
	// Used to loop email conversation messages.
	// Timer which is assigned 15 seconds (Updates every 5 seconds).
	PeriodicTimer periodicTimer = new(TimeSpan.FromSeconds(10));
	// bool variable for dialog state.
	/*
	@switch (message.colorCode
	)
	{
	case "green":
	<th style="background-color:green;">
			@message.solutiondatetime.Date
		</th>
		break;

		case "yellow":
		<th style="background-color:yellow; ">
			@message.solutiondatetime
							</th>

						break;
	case "red":
		<th style="background-color:red;">
			@message.solutiondatetime
		</th>

							break;
					}*/
	void SendMail(string typee, ItemId id, List<string> receivers, List<string> ccreceivers)
	{
		switch(typee)
		{
			case "Reply":
				SendReply(id, receivers, ccreceivers);
				break;
			case "Forward":
				SendForwardReply(id, receivers, ccreceivers);

				break;

			case "ReplyAll":
				SendReply(id, receivers, ccreceivers);
				break;

		}
	}
	// Reply button function.
	void ReplyButton(ItemId objectid, EmailMessage messageItem, bool isFromMe)
	{
		type = "Reply";
		isPressed = true;
		messageid = objectid;
		receiverList = new List<string>();
		CCList = new List<string>();

		EmailAddress item = messageItem.ToRecipients[0];
		// Getting receiver to list.
		if (isFromMe.Equals(false))
		{
			receiverList.Add(messageItem.From.Address.ToString());


		}
		else
		{
			receiverList.Add(item.Address.ToString());

		}



	}

	// ReplyAll button function.
	void ReplyButtonAll(ItemId objectid, EmailMessage messageItem, bool isFromMe)
	{
		type = "ReplyAll";

		isPressed = true;
		messageid = objectid;
		receiverList = new List<string>();
		CCList = new List<string>();

		// Loops all receivers for message.
		LoopData(messageItem);


	}

	// ReplyForward button function.
	private void ReplyButtonForward(ItemId objectid, EmailMessage messageItem, bool isFromMe)
	{
		type = "Forward";

		isPressed = true;
		messageid = objectid;
		receiverList = new List<string>();
		CCList = new List<string>();

		// Loops all receivers for message.
		LoopData(messageItem);

	}

	// Assinging ticket function
	private async System.Threading.Tasks.Task AssingTickett(string name, string id)
	{
		// Email backend function (assingticket).
		Emailing.AssingTicket(name, id);
	}

	// Delete function for deleting local list strings. (used in receivers/cclist)
	private void DeleteReceiver(string receiver, List<string> emailList)
	{
		emailList.Remove(receiver);
	}


	private void AddReceiver(string receiver, List<string> emailList)
	{
		if (emailList.Contains(receiver))
		{

		}

		else
		{
			if (receiver != "")
			{
				emailList.Add(receiver);
			}


		}
	}

	// The show history function to set buttonStatus.
	private void ShowHistory(ItemId itemid)
	{
		if (buttonStatus == 1)
		{
			itemidhistory = itemid;
			StateHasChanged();
			buttonStatus = 0;
		}

		else
		{
			itemidhistory = null;
			StateHasChanged();
			buttonStatus = 1;
		}
	}



	// Send email forward function. Calls backend function.
	private async System.Threading.Tasks.Task SendForwardReply(ItemId id, List<string> receivers, List<string> ccreceivers)
	{
		// Sets local variables to false/null as a email has been sended.
		isPressed = false;
		messageid = null;

		StateHasChanged();

		// Check to see if receivers are empty (cant send email if there are no receivers).
		if (receivers != null)
		{
			// Backend function to send forward email.
			Emailing.SendForwardEmail(id, textbox, receivers, ccreceivers);
		}
		else
		{
			await JSRuntime.InvokeVoidAsync("alert", "Add To receiver!!");
		}
		// Settings list's null because email has been send.
		CCList = null;
		receiverList = null;
	}

	// Reply function.
	private async System.Threading.Tasks.Task SendReply(ItemId id, List<string> receivers, List<string> ccreceivers)
	{
		// Sets local variables to false/null as a email has been sended.
		isPressed = false;
		messageid = null;

		StateHasChanged();

		// Check to see if receivers are empty (cant send email if there are no receivers).

		if (receivers != null)
		{
			Emailing.SendMail(id, textbox, receivers, ccreceivers);
		}
		else
		{
			await JSRuntime.InvokeVoidAsync("alert", "Add To receiver!!");
		}
		// Settings list's null because email has been send.

		CCList = null;
		receiverList = null;
	}



	protected override async System.Threading.Tasks.Task OnInitializedAsync()
	{
		// Getting current user data.
		var state = await provider;
		user = state.User;

		// Gets list from backend (inprogress tickets).
		mongoDbListinProgress = await Emailing.GetMessagesDBInProgressAsync();
		// Assing messages to list (Checks if there is new unreaded messages available and send them to database).
		mongoDbList = await Emailing.GetMessagesDbAsync();

	}

	// Looping receivers/cclist.
	void LoopData(EmailMessage messageItem)
	{

		foreach (EmailAddress item in messageItem.ToRecipients)
		{
			receiverList.Add(item.Address);

		}


		if (messageItem.CcRecipients.Count().Equals(1))
		{

			foreach (EmailAddress item in messageItem.CcRecipients)
			{
				CCList.Add(item.Address.ToString());

			}
		}
		else
		{
			foreach (EmailAddress item in messageItem.CcRecipients)
			{
				CCList.Add(item.Address.ToString());
			}
		}


	}
}