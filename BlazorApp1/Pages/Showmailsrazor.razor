





@using System.Collections.ObjectModel;
@using BlazorApp1.Authentication
@using BlazorApp1.Data
@using System.Timers;
@using Microsoft.Exchange.WebServices.Data;
@using BlazorApp1.Models;
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims
@using MongoDB.Bson
@inject Emails Emailing
@inject NavigationManager navManager;
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Administrator, HelpDesk")]
@inject AuthenticationStateProvider authStateProvider;
@inject AuthenticationStateProvider context;

<h3>Showmailsrazor</h3>

<div style="height: 300px; width: 650px;
    overflow: auto; ">
	
	<table>
		<tr>
			<th>Subject</th>
			<th>From</th>
			<th>Time</th>
			<th>Unreaded mails</th>
			<th>Status</th>
		</tr>

		@foreach (Datamodel message in mongoDbList)
		{
			<tr>
				<th>
					@message.subject
				</th>
				<th>
					@message.sender
				</th>
				<th>
					@message.datetimereceived
				</th>
				
				<th>
					@if (unreadedMails.Exists(a=>a.EmailConversationId == message.conversationid))
					{
					<th>
						!!!
						</th>
	}

					
				</th>

				<th>
					@switch (message.colorCode
							)
					{
						case "green":
							<th style="background-color:green;">
@message.solutiondatetime.Date
</th>
							break;

						case "yellow":
						<th style="background-color:yellow;">
						@message.solutiondatetime
						</th>

							break;
						case "red":
						<th style="background-color:red;">
						@message.solutiondatetime
						</th>

							break;
					}

				</th>
	
				<th style="    padding-left: 5px;">
					<button class="btn btn-primary" @onclick="() => CheckData(message.message_id.ToString(), message.conversationid)">Info</button>
					<button class="btn btn-primary" @onclick="() => AssingTicket(user.Identity.Name.ToString(), message.message_id)">Assing</button>
				</th>


			</tr>


			@if (emailChain != null && message.message_id.ToString().Equals(emailId) && ShowPopUp)
			{
				dialogOpen = true;
				<div class="modal" tabindex="-1" dialogbox role="dialog" style="margin-top:50px;">
					<div class="modal-dialog modal-lg">
						<div class="modal-content">

							<button type="button" class="btn btn-outline-primary rounded-circle" style="width: 55px; height: 55px; margin-left:10px; margin-top:10px;;" @onclick="()=> ClosePopup()"> <i class="fa fa-times fa-2x" aria-hidden="true" style="align-content:center;display: flex; justify-content: center;"></i></button>

							<Popupmodal message="message" emailChain="emailChain"/>

							
							
						</div>
					</div>
				</div>


			}
		}
	</table>
</div>

@code {
	private ItemId itemidhistory { get; set; }
	private string emailadress { get; set; }
	private string InputFrom { get; set; }
	private string cc { get; set; }
	private string textbox { get; set; }
	private bool dialogOpen = false;
	private AuthenticationState authstate;
	bool isPressed = false;
	private List<string> receiverList;
	private List<string> CCList;
	private bool isEmpty;
	[CascadingParameter] private Task<AuthenticationState> provider { get; set; } = default!;
	private ClaimsPrincipal? user;
	private ItemId messageid;
	private int buttonStatus { get; set; }
	// Timer variable declaration.
	private static System.Timers.Timer aTimer;
	// This is variable is used to get id of conversation which is later compared to dialog email id.
	private string emailId;
	// List which is used to get objects from MongoDB database collection.
	private List<Datamodel> mongoDbList;
	//private List<Datamodel> mongoDBListJobsInProgress;
	private string type;
	private List<string> replymessagecount;
	private List<Datamodel> mongoDbListinProgress;
	private List<NewEmails> unreadedMails;
	// Used to loop email conversation messages.
	// Timer which is assigned 15 seconds (Updates every 5 seconds).
	PeriodicTimer periodicTimer = new(TimeSpan.FromSeconds(10));

	// bool variable for dialog state.
	bool ShowPopUp = false;

	ConversationResponse emailChain;

	// This function is called when pressing more information about ticket.
	private async System.Threading.Tasks.Task CheckData(string id, string messageconv)
	{
		// Getting conversation of email to list.
		emailChain = await Emailing.GetConversion(id);
		// Assigning id, which is compared later in dialog.
		emailId = id;
		// This opens dialog when true.
		ShowPopUp = true;
		Emailing.DeleteUnreadedMails(messageconv);

	}
	private async System.Threading.Tasks.Task AssingTicket(string name, string id)
	{



		Emailing.AssingTicket(name, id);
	}
	private void DeleteReceiver(string receiver, List<string> lista)
	{
		lista.Remove(receiver);
	}


	private void AddReceiver(string receiver, List<string> lista)
	{
		if (lista.Contains(receiver))
		{

		}

		else
		{
			if (receiver != "")
			{
				lista.Add(receiver);
			}


		}
	}
	private void ShowHistory(ItemId itemid)
	{
		if (buttonStatus == 1)
		{
			itemidhistory = itemid;
			StateHasChanged();
			buttonStatus = 0;
		}

		else
		{
			itemidhistory = null;
			StateHasChanged();
			buttonStatus = 1;
		}
	}




	private async System.Threading.Tasks.Task SendReply(ItemId id, List<string> receivers, List<string> ccreceivers)
	{
		// Need's send mail function
		isPressed = false;
		messageid = null;

		StateHasChanged();

		Emailing.SendMail(id, textbox, receivers,ccreceivers);
		//ItemId id, ObjectId messageconversationid,string type, string addparam, string text, string cc,)
		CCList = null;
		receiverList = null;
	}
	private void SendForwardMessage(ItemId id)
	{
		type = "Forward";

		isPressed = true;
		messageid = null;
		StateHasChanged();

	}
	private void ChangeValue()
	{
		isPressed = false;
		messageid = null;
		StateHasChanged();

	}

	protected override async System.Threading.Tasks.Task OnInitializedAsync()
	{

		Emailing.UpdateColorStatus();


		var state = await provider;
		// This is the current logged in user
		user = state.User;

		mongoDbListinProgress = await Emailing.GetMessagesDBInProgressAsync();
		// Assing messages to list (Checks if there is new unreaded messages available and send them to database).
		mongoDbList = await Emailing.GetMessagesDbAsync();// Starts 5 second timer
																//mongoDbListinProgress = await Emailing.GetInProgressMessagesDBAsync();
		unreadedMails = await Emailing.GetUnreadedMails();
		RunTimer();
	}
	void loopdata(EmailMessage messageitem)
	{

		foreach (EmailAddress item in messageitem.ToRecipients)
		{
			receiverList.Add(item.Address);

		}


		if (messageitem.CcRecipients.Count().Equals(1))
		{

			foreach (EmailAddress item in messageitem.CcRecipients)
			{
				CCList.Add(item.Address.ToString());

			}
		}
		else
		{
			foreach (EmailAddress item in messageitem.CcRecipients)
			{
				CCList.Add(item.Address.ToString());
			}
		}


	}

	void ReplyButton(ItemId objectid, EmailMessage messageitem, bool isFromMe)
	{
		type = "Reply";

		isPressed = true;
		messageid = objectid;
		receiverList = new List<string>();
		CCList = new List<string>();

		EmailAddress item = messageitem.ToRecipients[0];

		if (isFromMe.Equals(false))
		{
			receiverList.Add(messageitem.From.Address.ToString());


		}
		else
		{
			receiverList.Add(item.Address.ToString());

		}



	}
	void SendReplyAll(ItemId objectid, EmailMessage messageitem, bool isFromMe)
	{
		type = "ReplyAll";

		isPressed = true;
		messageid = objectid;
		receiverList = new List<string>();
		CCList = new List<string>();
		loopdata(messageitem);


	}
	void ClosePopup()
	{
		// Changes value to false to shutdown dialog module
		ShowPopUp = false;

		// Response view is set to original state (so that it doesn't stay open in background when shutted)
		isPressed = false;
		messageid = null;
		// Changes website state without reload.
		StateHasChanged();

	}

	async void RunTimer()
	{
		// Timer function.
		while (await periodicTimer.WaitForNextTickAsync())
		{
			// Do check to verify that there is new email
			// Get new emails and updates list.
			mongoDbList = await Emailing.GetMessagesDbAsync();
			//replymessagecount = Emailing.GetEmails();
			unreadedMails = await Emailing.GetUnreadedMails();

			StateHasChanged();



		}



		
	}

}
