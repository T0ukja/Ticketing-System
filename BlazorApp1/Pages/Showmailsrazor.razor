





@using System.Collections.ObjectModel;
@using BlazorApp1.Authentication
@using BlazorApp1.Data
@using System.Timers;
@using Microsoft.Exchange.WebServices.Data;
@using BlazorApp1.Models;
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims
@using MongoDB.Bson
@inject Emails Emailing
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Administrator, HelpDesk")]
@inject AuthenticationStateProvider authStateProvider;

<div style="height: 300px;
    overflow: auto; ">
	
	<table style="width: 1550px;">
		<tr style="text-align:center; align-content:center; border: 3px solid black; align-items:center;">
			<th>Subject</th>
			<th>From</th>
			<th>Time</th>
			<th>Unreaded mails</th>
			<th>Status</th>
			<th>Actions</th>
		</tr>

		@foreach (Datamodel message in mongoDbList)
		{
			<tr style="text-align:center; align-content:center; border: 1px solid black; align-items:center;">
				<th>
					@message.subject
				</th>
				<th>
					@message.sender
				</th>
				<th>
					@message.datetimereceived
				</th>
				
				<th>
			
					@if (unreadedMails.Exists(a=>a.EmailConversationId == message.conversationid))
					{
					<p>
							!!!
						</p>
					
	}
				</th>

					
			

				
					@switch (message.colorCode
							)
					{
						case "green":
							<th style="background-color:green;">
@message.solutiondatetime.Date
</th>
							break;

						case "yellow":
						<th style="background-color:yellow; ">
						@message.solutiondatetime
						</th>

							break;
						case "red":
						<th style="background-color:red;">
						@message.solutiondatetime
						</th>

							break;
					}

				
	
				<th style="    padding-left: 5px;">
					<button class="btn btn-primary" @onclick="() => CheckData(message.message_id.ToString(), message.conversationid)">Info</button>
					@if(message.handler == "")
					{
						<button class="btn btn-primary" @onclick="() => AssingTicket(user.Identity.Name.ToString(), message.message_id)">Assing</button>

					}
					<button class="btn btn-primary" @onclick="() => SolveTicket(message)">Mark</button>

				</th>


			</tr>


			@if (emailChain != null && message.message_id.ToString().Equals(emailId) && ShowPopUp)
			{
				<div class="modal" tabindex="-1" dialogbox role="dialog" style="margin-top:50px; ">
					<div class="modal-dialog modal-lg" >
						<div class="modal-content">

							<button type="button" class="btn btn-outline-primary rounded-circle" style="width: 55px; height: 55px; margin-left:10px; margin-top:10px;;" @onclick="()=> ClosePopup()"> <i class="fa fa-times fa-2x" aria-hidden="true" style="align-content:center;display: flex; justify-content: center;"></i></button>

							<Popupmodal message="message" emailChain="emailChain"/>

							
							
						</div>
					</div>
				</div>


			}
		}
	</table>
</div>
@if (ShowPopUp == false && showMarkStatus == true)
{
	<div style="background-color:white; width: 60vw;  display: flex;">
		<button type="button" class="btn btn-outline-primary rounded-circle" style="width: 55px; height: 55px; float:left;" @onclick="()=> {showMarkStatus = false; StateHasChanged();}"><i class="fa fa-times fa-2x" aria-hidden="true"></i></button>

		<Extrawindowmodal Comments="Comments" messageid="@messageidforwindow" />
	</div>
}
@code {


	private List<Comments> Comments;
	private bool showMarkStatus = false;

	// Setting
	private string messageidforwindow { get; set; }

	[CascadingParameter] private Task<AuthenticationState> provider { get; set; } = default!;
	private ClaimsPrincipal? user;

	// Timer variable declaration.
	private static System.Timers.Timer aTimer;

	// This is variable is used to get id of conversation which is later compared to dialog email id.
	private string emailId;

	// List which is used to get objects from MongoDB database collection.
	[Parameter]
	public List<Datamodel> mongoDbList { get; set; }
	// Used to set type of answering (if reply or replyall/forward). It's local value.

	// List for unreaded emails.
	private List<NewEmails> unreadedMails;
	// Used to loop email conversation messages.
	// Timer which is assigned 10 seconds (Updates every 10 seconds).
	PeriodicTimer periodicTimer = new(TimeSpan.FromSeconds(10));

	// bool variable for dialog state.
	bool ShowPopUp = false;

	// Used to get email conversations.
	ConversationResponse emailChain;

	// This function is called when pressing more information about ticket.
	private async System.Threading.Tasks.Task CheckData(string id, string messageconv)
	{
		// Getting conversation of email to list.
		emailChain = await Emailing.GetConversion(id);
		// Assigning id, which is compared later in dialog.
		emailId = id;
		// This opens dialog when true.
		ShowPopUp = true;
		Emailing.DeleteUnreadedMails(messageconv);

	}

	// Assinging ticket.
	private async System.Threading.Tasks.Task AssingTicket(string name, string id)
	{


		Emailing.AssingTicket(name, id);
	}




	// this function is used to popup this Extrawindowmodal (sets value true and ui is showing the ui for Extrawindowmodal)
	private async System.Threading.Tasks.Task SolveTicket(Datamodel message)
	{
		showMarkStatus = true;
		messageidforwindow = message.message_id;
		Comments = await Emailing.GetComments(messageidforwindow);

	}



	protected override async System.Threading.Tasks.Task OnInitializedAsync()
	{
		var state = await provider;
		// This is the current logged in user
		user = state.User;

		unreadedMails = await Emailing.GetUnreadedMails();
		RunTimer();
	}


	void ClosePopup()
	{
		// Changes value to false to shutdown dialog module
		ShowPopUp = false;
		// Changes website state without reload.
		StateHasChanged();

	}

	async void RunTimer()
	{
		// Timer function.
		while (await periodicTimer.WaitForNextTickAsync())
		{
			Emailing.UpdateColorStatus();
			Emailing.GetEmails();
			// Do check to verify that there is new email
			// Get new emails and updates list.
			//mongoDbList = await Emailing.GetMessagesDbAsync();
			unreadedMails = await Emailing.GetUnreadedMails();

			StateHasChanged();



		}



		
	}

}
