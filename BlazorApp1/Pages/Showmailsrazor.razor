





@using System.Collections.ObjectModel;
@using BlazorApp1.Authentication
@using BlazorApp1.Data
@using System.Timers;
@using Microsoft.Exchange.WebServices.Data;
@using BlazorApp1.Models;
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims
@using MongoDB.Bson
@inject Emails Emailing
@inject NavigationManager navManager;
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Administrator, HelpDesk")]
@inject AuthenticationStateProvider authStateProvider;
@inject AuthenticationStateProvider context;

<h3>Showmailsrazor</h3>

<div style="height: 300px; width: 650px;
    overflow: auto; ">
	<table>
		<tr>
			<th>Subject</th>
			<th>From</th>
			<th>Time</th>
			<th></th>
		</tr>


		@foreach (Datamodel message in mongoDbList)
		{
			<tr>
				<th>
					@message.subject
				</th>
				<th>
					@message.sender
				</th>
				<th>
					@message.datetimereceived
				</th>

				<th style="    padding-left: 5px;">
					<button class="btn btn-primary" @onclick="() => CheckData(message.message_id.ToString())">Info</button>
					<button class="btn btn-primary" @onclick="() => AssingTickett(user.Identity.Name.ToString(), message.message_id)">Assing</button>
				</th>


			</tr>


			@if (emailChain != null && message.message_id.ToString().Equals(emailId) && ShowPopUp)
			{
				dialogOpen = true;
				<div class="modal" tabindex="-1" dialogbox role="dialog" style="margin-top:50px;">
					<div class="modal-dialog modal-lg">
						<div class="modal-content">

							<button type="button" class="btn btn-outline-primary rounded-circle" style="width: 55px; height: 55px; margin-left:10px; margin-top:10px;;" @onclick="()=> ClosePopup()"> <i class="fa fa-times fa-2x" aria-hidden="true" style="align-content:center;display: flex; justify-content: center;"></i></button>


							<div class="modal-header" style="align-self:center; margin-top:-20px;">




								<h1>
									@message.subject
								</h1>


							</div>
							<div class="modal-body" id="listitems">


								@foreach (ConversationNode node in emailChain.ConversationNodes)
								{

									@foreach (EmailMessage item in node.Items)
									{


										var index = @item.TextBody.Text.ToString().IndexOf("_");
										<br />
										<div id="divTest" style="border:1px solid black; border-radius: 5px; ">

											<div style="display:flex;border-bottom: 3px solid;
">

												<div style="margin-left:50px; justify-content:center;">
													From : @item.From.Address.ToString()
													<br />
													@if (@item.ToRecipients.Count != 0)
													{




														<p style="display:flex;">
															To :
															@foreach (EmailAddress emailmessaage in item.ToRecipients)
															{
															<p>	@emailmessaage.Address.ToString(), </p>
															}
														</p>
													}

													<br />
													@if (@item.CcRecipients.Count != 0)
													{




														<p style="display:flex;">
															CC :
															@foreach (EmailAddress emailmessaage in item.CcRecipients)
															{
															<p>	@emailmessaage.Address.ToString(), </p>
															}
														</p>
													}

												</div>


												@if (isPressed == false)
												{
													<div style="margin-left:auto;margin-right:25px;">




														<a href="javascript::void(0)" @onclick="()=>ReplyButton(item.Id, item, item.IsFromMe)">

															<i aa class="fa fa-reply fa-2x" aria-hidden="true"></i>
														</a>

														<a href="javascript::void(0)" @onclick="()=>SendReplyAll(item.Id, item, item.IsFromMe)">
															<i aa class="fa fa-reply-all fa-2x" aria-hidden="true"></i>
														</a>
														<a href="javascript::void(0)" @onclick="()=>SendForwardMessage(item.Id)">

															<i aa class="fa fa-share fa-2x" aria-hidden="true"></i>
														</a>
													</div>

												}
											</div>

											@if (index > 1)
											{

												<div style="text-align:left; margin-left:15px;">
													@item.TextBody.Text.Remove(index).ToString()
													<br />
													<a href="javascript::void(0)" @onclick="()=>ShowHistory(item.Id)">Show history</a>

													@if (item.Id.Equals(itemidhistory))
													{
														@item.TextBody.Text.ToString()
													}
												</div>

											}
											else
											{



												<div style="text-align:left; margin-left:15px;">

													@item.TextBody.Text.ToString()
												</div>



											}





											@if (item.Id == messageid)
											{
												@if (type == "Reply")
												{


													<div style="border:3px solid black; margin-top:10px; margin-bottom;10px; margin-left:10px; margin-right:10px; background-color:lightblue;">
														<div style="display:flex;">
															<p>
																Add receivers
																<input @bind="InputFrom" style="width: 380px; height: 20px;" />
															</p>
															<button type="button" class="btn btn-outline-primary rounded-circle" style="width:40px; height:40px" @onclick="() => AddReceiver(InputFrom,receiverList)">
																<i class="fa fa-plus" aria-hidden="true" style="align-content:center;display: flex; justify-content: center;"></i>
															</button>


														</div>
														<div style="display:flex;">
															<p>
																Add CC
																<input @bind="cc" style="width: 380px; height: 20px;" />
															</p>
															<button type="button" class="btn btn-outline-primary rounded-circle" style="width:40px; height:40px" @onclick="() => AddReceiver(textbox, CCList)">
																<i class="fa fa-plus" aria-hidden="true" style="align-content:center;display: flex; justify-content: center;"></i>
															</button>
														</div>

														@if (receiverList != null)
														{

															@foreach (string receiver in receiverList)
															{
																<p>To</p>
																<div style="display:flex; width: 300px;  margin-left:50px;">

																	<p style="font-size: 18px; font-family:'Times New Roman', Times, serif;margin-left:10px;">@receiver</p> <button type="button" class="btn btn-lg" style="background-color:transparent; width:40px;height:40px; margin-left:auto" @onclick="()=>DeleteReceiver(receiver, receiverList)">
																		<i class="fa fa-window-close fa-2x" aria-hidden="true" style="align-content:center;justify-content: center; display:flex;"></i>
																	</button>
																</div>
															}


														}
														@if (CCList != null)
														{

															@foreach (string receiver in CCList)
															{
																<p>CC</p>
																<div style="display:flex; width: 300px;  margin-left:50px;">

																	<p style="font-size: 18px; font-family:'Times New Roman', Times, serif;margin-left:10px;">@receiver</p> <button type="button" class="btn btn-lg" style="background-color:transparent; width:40px;height:40px; margin-left:auto" @onclick="()=>DeleteReceiver(receiver, receiverList)">
																		<i class="fa fa-window-close fa-2x" aria-hidden="true" style="align-content:center;justify-content: center; display:flex;"></i>
																	</button>
																</div>
															}
														}
														<p>
															Input
															<input @bind="textbox" style="width: 90%; height: 150px;" />
														</p>


														<button type="button" class="btn btn-outline-primary rounded-circle" style="Width:50px; Height:50px;" @onclick="() => SendReply(item.Id.ToString(), message.message_id)">
															<i class="fa fa-paper-plane fa-2x" aria-hidden="true" style="align-content:center;display: flex; justify-content: center;"></i>
														</button>
														<button type="button" class="btn btn-outline-primary rounded-circle" style="width:50px; height:50px;" @onclick="()=>{isPressed = false; messageid = null; StateHasChanged();}">
															<i class="fa fa-times fa-2x" aria-hidden="true"></i>
														</button>



													</div>
												}


												@if (type == "ReplyAll")
												{
													<div style="border:3px solid black; margin-top:10px; margin-bottom;10px; margin-left:10px; margin-right:10px; background-color:lightblue;">

														<p>
															To
															<input @bind="emailadress" />
														</p>

														<p>
															CC
															<input @bind="cc" />
														</p>
														<p>Address List</p>
														@if (receiverList != null)
														{
															<p>To</p>

															@foreach (string receiver in receiverList)
															{
																<div style="display:flex; width: 300px;  margin-left:50px;">

																	<p style="font-size: 18px; font-family:'Times New Roman', Times, serif;margin-left:10px;">@receiver</p> <button type="button" class="btn btn-lg" style="background-color:transparent; width:40px;height:40px; margin-left:auto" @onclick="()=>DeleteReceiver(receiver, receiverList)">
																		<i class="fa fa-window-close fa-2x" aria-hidden="true" style="align-content:center;justify-content: center; display:flex;"></i>
																	</button>
																</div>
															}



														}

														@if (CCList != null)
														{
															<p>CC</p>

															@foreach (string receiver in CCList)
															{
																<div style="display:flex; width: 300px;  margin-left:50px;">

																	<p style="font-size: 18px; font-family:'Times New Roman', Times, serif;margin-left:10px;">CC @receiver</p> <button type="button" class="btn btn-lg" style="background-color:transparent; width:40px;height:40px; margin-left:auto" @onclick="()=>DeleteReceiver(receiver, CCList)">
																		<i class="fa fa-window-close fa-2x" aria-hidden="true" style="align-content:center;justify-content: center; display:flex;"></i>
																	</button>
																</div>
															}
														}
														<p>
															Input
															<input @bind="textbox" style="width: 90%; height: 150px;" />
														</p>
														<button type="button" class="btn btn-outline-primary rounded-circle" style="Width:50px; Height:50px;" @onclick="() => SendReply(item.Id.ToString(), message.message_id)">
															<i class="fa fa-paper-plane fa-2x" aria-hidden="true" style="align-content:center;display: flex; justify-content: center;"></i>
														</button>
														<button type="button" class="btn btn-outline-primary rounded-circle" style="width:50px; height:50px;" @onclick="()=>{isPressed = false; messageid = null; StateHasChanged();}">
															<i class="fa fa-times fa-2x" aria-hidden="true"></i>
														</button>

													</div>
												}
											}








										</div>



									}
								}

							</div>
						</div>
					</div>
				</div>


			}
		}
	</table>
</div>

@code {
	private ItemId itemidhistory { get; set; }
	private string emailadress { get; set; }
	private string InputFrom { get; set; }
	private string cc { get; set; }
	private string textbox { get; set; }
	private bool dialogOpen = false;
	private AuthenticationState authstate;
	bool isPressed = false;
	private List<string> receiverList;
	private List<string> CCList;

	[CascadingParameter] private Task<AuthenticationState> provider { get; set; } = default!;
	private ClaimsPrincipal? user;
	private ItemId messageid;
	private int buttonStatus { get; set; }
	// Timer variable declaration.
	private static System.Timers.Timer aTimer;
	// This is variable is used to get id of conversation which is later compared to dialog email id.
	private string emailId;
	// List which is used to get objects from MongoDB database collection.
	private List<Datamodel> mongoDbList;
	//private List<Datamodel> mongoDBListJobsInProgress;
	private string type;
	private List<Datamodel> mongoDbListinProgress;
	// Used to loop email conversation messages.
	// Timer which is assigned 15 seconds (Updates every 5 seconds).
	PeriodicTimer periodicTimer = new(TimeSpan.FromSeconds(10));
	// bool variable for dialog state.
	bool ShowPopUp = false;

	ConversationResponse emailChain;

	// This function is called when pressing more information about ticket.
	private async System.Threading.Tasks.Task CheckData(string id)
	{
		// Getting conversation of email to list.
		emailChain = await Emailing.GetConversion(id);
		// Assigning id, which is compared later in dialog.
		emailId = id;
		// This opens dialog when true.
		ShowPopUp = true;

	}
	private async System.Threading.Tasks.Task AssingTickett(string name, string id)
	{



		Emailing.AssingTicket(name, id);
	}
	private void DeleteReceiver(string receiver, List<string> lista)
	{
		lista.Remove(receiver);
	}


	private void AddReceiver(string receiver, List<string> lista)
	{
		if (lista.Contains(receiver))
		{

		}

		else
		{
			if (receiver != "")
			{
				lista.Add(receiver);
			}


		}
	}
	private void ShowHistory(ItemId itemid)
	{
		if (buttonStatus == 1)
		{
			itemidhistory = itemid;
			StateHasChanged();
			buttonStatus = 0;
		}

		else
		{
			itemidhistory = null;
			StateHasChanged();
			buttonStatus = 1;
		}
	}




	private async System.Threading.Tasks.Task SendReply(string id, string conversationid)
	{
		// Need's send mail function
		isPressed = false;
		messageid = null;

		StateHasChanged();

		Emailing.SendMail(id, conversationid, type, "", textbox, "");
		//ItemId id, ObjectId messageconversationid,string type, string addparam, string text, string cc,)
	}
	private void SendForwardMessage(ItemId id)
	{
		type = "Forward";

		isPressed = true;
		messageid = null;
		StateHasChanged();

	}
	private void ChangeValue()
	{
		isPressed = false;
		messageid = null;
		StateHasChanged();

	}

	protected override async System.Threading.Tasks.Task OnInitializedAsync()
	{

		var state = await provider;
		// This is the current logged in user
		user = state.User;

		mongoDbListinProgress = await Emailing.GetMessagesDBInProgressAsync();
		// Assing messages to list (Checks if there is new unreaded messages available and send them to database).
		mongoDbList = await Emailing.GetMessagesDbAsync();// Starts 5 second timer
																//mongoDbListinProgress = await Emailing.GetInProgressMessagesDBAsync();
		RunTimer();
	}
	void loopdata(EmailMessage messageitem)
	{

		foreach (EmailAddress item in messageitem.ToRecipients)
		{
			receiverList.Add(item.Address);

		}


		if (messageitem.CcRecipients.Count().Equals(1))
		{

			foreach (EmailAddress item in messageitem.CcRecipients)
			{
				CCList.Add(item.Address.ToString());

			}
		}
		else
		{
			foreach (EmailAddress item in messageitem.CcRecipients)
			{
				CCList.Add(item.Address.ToString());
			}
		}


	}

	void ReplyButton(ItemId objectid, EmailMessage messageitem, bool isFromMe)
	{
		type = "Reply";

		isPressed = true;
		messageid = objectid;
		receiverList = new List<string>();
		CCList = new List<string>();

		EmailAddress item = messageitem.ToRecipients[0];

		if (isFromMe.Equals(false))
		{
			receiverList.Add(messageitem.From.Address.ToString());


		}
		else
		{
			receiverList.Add(item.Address.ToString());

		}



	}
	void SendReplyAll(ItemId objectid, EmailMessage messageitem, bool isFromMe)
	{
		type = "ReplyAll";

		isPressed = true;
		messageid = objectid;
		receiverList = new List<string>();
		CCList = new List<string>();
		loopdata(messageitem);


	}
	void ClosePopup()
	{
		// Changes value to false to shutdown dialog module
		ShowPopUp = false;

		// Response view is set to original state (so that it doesn't stay open in background when shutted)
		isPressed = false;
		messageid = null;
		// Changes website state without reload.
		StateHasChanged();

	}
	async void RunTimer()
	{
		// Timer function.
		while (await periodicTimer.WaitForNextTickAsync())
		{
			// Do check to verify that there is new email
			// Get new emails and updates list.
			Emailing.GetEmails();
			mongoDbList = await Emailing.GetMessagesDbAsync();

			StateHasChanged();



		}
	}

}
