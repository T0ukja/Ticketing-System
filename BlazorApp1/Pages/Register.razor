@page "/register"
@using BlazorApp1.Models
@using BlazorApp1.Data
@using MongoDB.Bson;
@attribute [Authorize(Roles = "Administrator")]
@inject IJSRuntime JSRuntime
@inject Login login

<style>

	body{
		background-color: #92c5ef;
	}
</style>
<h3>Register</h3>
<div>
    <div style="width: 250px;
    float: left;
    padding: 20px;
">
    <p>
        UserName
    </p>
    <p>
     
    <input @bind="registeru" />
</p>
  <p>
        Password
    </p>
<p>
    <input @bind="registerp" />
</p>
        <button type="button" class="btn btn-primary" @onclick="()=> CreateUser(registeru,registerp,selecterRole)">
            Register
        </button>


</div>
    <div style="width:150px;
             float: left;
             padding: 20px;"
             >
        <ListGroup Mode="ListGroupMode.Selectable" @bind-SelectedItem="selecterRole">
            <ListGroupItem Name="Administrator">Admin</ListGroupItem>
            <ListGroupItem Name="HelpDesk">HelpDesk</ListGroupItem>
        </ListGroup>
    </div>
 
</div>




<div style="width:60%; overflow:auto; height:400px;">

    <table style="width:100%; ">




    @foreach (LoginModel user in currentUsers)
        {
            <tr style=" font-size:15px; padding-top:15px; border-radius: 25px; width:50%;">
            

                <p style="
  padding: 10px;
  border: 3px solid black;
  margin: 0;
background-color:white;
margin-left:10px;
margin-right:10px;
align-content:center;
margin-bottom:10px;
padding-left:25px;
  border-radius: 25px;
"><span style="font-weight:bold;"> UserName:</span>@user.username <br />
                    <span style="font-weight:bold;"> Role:</span>
                    @user.Role
                  
                		<button class="btn btn-primary" @onclick="() => {passwordButtonPressed = true; deleteButtonPressed = false; currentUser=user;}">Set password</button>
                    <button class="btn btn-primary" @onclick="() => {deleteButtonPressed = true; passwordButtonPressed = false; currentUser=user;}">Delete User</button>
                
                </p> 
        

            </tr>
            <br />
        
    }
</table>

</div>

@if(passwordButtonPressed == true & deleteButtonPressed == false)
{
   
        <div class="modal" tabindex="-1" dialogbox role="dialog" style="margin-top:50px;">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">

                <button type="button" class="btn btn-outline-primary rounded-circle" style="width: 55px; height: 55px; margin-left:10px; margin-top:10px;;" @onclick="()=> {passwordButtonPressed = false; StateHasChanged();}"> <i class="fa fa-times fa-2x" aria-hidden="true" style="align-content:center;display: flex; justify-content: center;"></i></button>
                <div class="modal-header" style="align-self:center; margin-top:-20px;">
                    <h1>
                       Set new password for @currentUser.username
                    </h1>
                </div>
                <div class="modal-body" id="listitems">

                    <textarea @bind="passbox" cols="40" rows="1"></textarea>

                 <button type="button" class="btn btn-outline-primary rounded-circle" style="width: 55px; height: 55px; margin-left:10px; margin-top:10px;;" @onclick="()=> {passwordButtonPressed = false; StateHasChanged();}"> <i class="fa fa-times fa-2x" aria-hidden="true" style="align-content:center;display: flex; justify-content: center;"></i></button>

                    <button type="button" class="btn btn-outline-primary rounded-circle" style="width: 55px; height: 55px; margin-left:10px; margin-top:10px;;" @onclick="()=> {ResetPassword(passbox, currentUser.id);}"> <i class="fa fa-paper-plane fa-2x" aria-hidden="true" style="align-content:center;display: flex; justify-content: center;"></i></button>


                    </div>
                   



                </div>
            </div>
        </div>


   

}
@if (deleteButtonPressed == true & passwordButtonPressed == false)
{
   
        <div class="modal" tabindex="-1" dialogbox role="dialog" style="margin-top:50px;">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">

                <div class="modal-header" style="align-self:center; margin-top:-20px;">
                    <h1>
                        Are you sure to delete @currentUser.username User?
                    </h1>
                </div>
                <div class="modal-body" id="listitems" style="display:flex; justify-content:space-around;">
                

                <button type="button" class="btn btn-outline-primary rounded-circle" style="width: 55px; height: 55px; margin-left:10px; margin-top:10px;;" @onclick="()=> {deleteButtonPressed = false; StateHasChanged();}"> No</button>
                <button type="button" class="btn btn-outline-primary rounded-circle" style="width: 55px; height: 55px; margin-left:10px; margin-top:10px;;" @onclick="()=> {DeleteUser(currentUser.id);}"> Yes</button>

            </div>

            </div>

                </div>
            </div>
      


}



<div>



</div>
 
            <asp:Button ID="Button1" runat="server" OnClick="Button1_Click" Text="Submit" />  
@code {
    // strings for ui (input fields)
    private string? passbox { get; set; }
    private string? registeru { get; set; }
    private string? registerp { get; set; }

    // select whether new user will be Admin or HelpDesk.
    private string selecterRole;
    //  Variables for currentUsers and password changing activity and deleting activity.
    private LoginModel currentUser;
    private List<LoginModel> currentUsers { get; set; }
    private bool passwordButtonPressed = false;
    private bool deleteButtonPressed = false;

    protected override async Task OnInitializedAsync()
    {
        // Get list of current users.
        currentUsers = await login.UserList();
    }



    // Password reseting function.
    private void ResetPassword(string passwordtext, ObjectId id)
    {
        passwordButtonPressed = false;
        StateHasChanged();
        login.SetNewPassword(passwordtext, id);
    }

    private void DeleteUser(ObjectId id)
    {

        deleteButtonPressed = false;
        StateHasChanged();
        login.DeleteUser(id);

    }
    private async Task CreateUser(string registeru, string registerp, string type) {
        if(selecterRole == null || registeru == "" || registerp == "")
        {
            await JSRuntime.InvokeVoidAsync("alert", "Fill all needed values for user");

        }
        else
        {
            bool checkValue = login.CheckIfUserExists(registeru);
            if (checkValue)
            {
                await JSRuntime.InvokeVoidAsync("alert", "User already exists!");

            }
            else
            {
                await login.CreateNewUser(registeru, registerp, type);
                await JSRuntime.InvokeVoidAsync("alert", "User created succesfully");

            }

           

        }

    }

 
}
