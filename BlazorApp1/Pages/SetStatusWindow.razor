@using System.Collections.ObjectModel;
@using BlazorApp1.Authentication
@using BlazorApp1.Data
@using System.Timers;
@using Microsoft.Exchange.WebServices.Data;
@using BlazorApp1.Models;
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims;
@inject IJSRuntime JSRuntime

@inject Emails Emailing
@inject AuthenticationStateProvider authStateProvider;
@inject AuthenticationStateProvider context;
<div>
	<p style="text-align:center;">Set ticket status</p>

	<BSInput InputType="InputType.Select" @bind-Value="_value">
		<option value="null">Open this select menu</option>
		<option value="1">Done</option>
		<option value="2">Stopped</option>
		<option value="3">Currently handling</option>
		<option value="4">Waiting</option>
		<option value="5">New</option>

	</BSInput>

	<p style="text-align:center;">Write information about status</p>
	<input @bind="solvebox" style="height:125px; width:325px;" />

	<button type="button" class="btn btn-outline-primary" style=" margin-left:10px; margin-top:10px;;" @onclick="()=> SetStatus()">Set Status</button>
</div>
@code {
	private string? _value;
	private string solvebox { get; set; }
	[Parameter]
	public string messageid { get; set; }
	public Datamodel datamodeli;
	private bool isHistory = false;
	private async void SetStatus()
	{
		if (isHistory)
		{
			Emailing.SetTicketStatusHistory(_value, solvebox, messageid);
			await JSRuntime.InvokeVoidAsync("alert", "Status changed, you can close window now");

		}
		else
		{
			
		
			await JSRuntime.InvokeVoidAsync("alert", "Password is changed!");

			Emailing.SetTicketStatus(_value, solvebox, messageid);
		}
	}



	protected override async System.Threading.Tasks.Task OnInitializedAsync()
	{

		datamodeli = await Emailing.GetTicketStatus(messageid);
		if(datamodeli != null)
		{
			_value = datamodeli.status;

		}
		else
		{

			datamodeli = await Emailing.GetTicketStatusFromHistory(messageid);
			_value = datamodeli.status;
			isHistory = true;

		}

	}
}
