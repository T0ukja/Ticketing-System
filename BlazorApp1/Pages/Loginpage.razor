@page "/login"
@using System.Collections.ObjectModel;
@using BlazorApp1.Pages
@using BlazorApp1.Models
@using BlazorApp1.Data
@using BlazorApp1.Authentication
@inject Login Logging
@inject AuthenticationStateProvider authStateProvider;
@inject NavigationManager navManager;
@inject IJSRuntime JSRuntime

<link href="/css/StyleSheet.css" rel="stylesheet" />
<body logpage>
    
<style>

	body{
		background-color: #A5C6FF;
	}
</style>



  <AuthorizeView>
      <NotAuthorized>
          <div container>
    
       <div>
              <h3 style="text-align:center; font-size:40px;">Login</h3>
            <p>
    <input @bind="logusername" />
</p>
<p>
    <input type="@TxtType" @bind="logPassword" />

</p>
<p>
        <input type="checkbox" @onclick="()=>myFunction()"> Show Password

</p>


           
                        <button type="button" class="btn btn-outline-primary" @onclick="()=>CheckLogin(logusername,logPassword)" >Login</button>



   

     
 
       </div>


</div>

      </NotAuthorized>
  </AuthorizeView>
  

  </body>



@code {
        public string TxtType = "password"; 
    private async Task myFunction()
    {
        if(TxtType == "password")
        {
            TxtType = "text";

        }
        else{
            TxtType = "password";
        }
    }

    // Variables for handling login data.
    private string? logusername { get; set; }
    private string? logPassword { get; set; }



    private async Task CheckLogin(string username, string password) {
        LoginModel userAccount = Logging.CheckUserLogin(username, password);



        if (userAccount != null)
        {
            var customAuthenticationProvider = (CustomAuthenticationProvider)authStateProvider;
            await customAuthenticationProvider.UpdateAuthenticationState(new UserSession
                {
                    UserName = userAccount.username,
                    Role = userAccount.Role
        });
            navManager.NavigateTo("/", true);
        }
    else
    {
        await JSRuntime.InvokeVoidAsync("alert", "Invalid Credentials!");
    }

     
    }
}
